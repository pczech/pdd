<?php

/**
 * @file
 * Provide a simulated beep.
 */

/**
 * Implements hook_action_info().
 */
function beep_action_info() {
  // Action function naming convention: MODULE_FUNCNAME_action.
  $actions['beep_beep_action'] = array(
    'label' => t('Beep annoyingly'),
    'type' => 'system',
    'configurable' => FALSE,
    'triggers' => array(
      'node_view',
      'node_insert',
      'node_update',
      'node_delete',
    ),
  );

  $actions['beep_multiple_beep_action'] = array(
    'label' => t('Beep multiple times'),
    'type' => 'system',
    'configurable' => TRUE,
    'triggers' => array(
      'node_view',
      'node_insert',
      'node_update',
      'node_delete',
    ),
  );

  return $actions;
}


/**
 * Action function named by the convention as MODULE_FUNCNAME_action.
 */
function beep_beep_action(&$entity, $context = array()) {
  dpm($entity);
  dpm($context);

  beep_beep();
}


/**
 * Logs a 'Beep' system message.
 */
function beep_beep() {
  watchdog('beep', 'Beep!');
}


/**
 * Multiple Beep advanced action form definition function.
 */
function beep_multiple_beep_action_form($context) {
  dpm($context);
  $form['beeps'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of beeps'),
    '#description' => t('Enter the number of times to beep when this action executes'),
    '#default_value' => isset($context['beeps']) ? $context['beeps'] : '1',
    '#required' => TRUE,
    '#size' => 3,
  );

  return $form;
}


/**
 * Multiple Beep advanced action validate function.
 *
 * The validate function is called before submit function.
 */
function beep_multiple_beep_action_validate($form, $form_state) {
  $beeps = $form_state['values']['beeps'];

  /*
  if (!is_int($beeps)) {
    form_set_error('beeps', t('Please enter a whole number between 0 and 10.'));
  }
  */

  if (!is_numeric($beeps) || intval($beeps) != $beeps) {
    form_set_error('beeps', t('Please enter a whole number between 0 and 10.'));
  }
  elseif ((int) $beeps > 10) {
    form_set_error('beeps', t('That would be too annoying. Please choose not more than 10
        beeps.'));
  }
  elseif ((int) $beeps < 0) {
    form_set_error('beeps', t('That would likely create a black hole! Beeps must be a
        positive integer.'));
  }
}


/**
 * Multiple Beep advanced action submit function.
 */
function beep_multiple_beep_action_submit($form, $form_state) {
  return array('beeps' => (int)$form_state['values']['beeps']);
}


/**
 * Multiple Beep advance action function
 */
function beep_multiple_beep_action(&$entity, $context = array()) {
  dpm($entity);
  dpm($context);

  for ($i = 0; $i < $context['beeps']; $i++) {
  beep_beep();
}

}
