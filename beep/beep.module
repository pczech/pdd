<?php

/**
 * @file
 * Provide a simulated beep.
 */

/**
 * Implements hook_action_info().
 */
function beep_action_info() {
  // Action function naming convention: MODULE_FUNCNAME_action.
  $actions['beep_beep_action'] = array(
    'label' => t('Beep annoyingly'),
    'type' => 'system',
    'configurable' => FALSE,
    'triggers' => array(
      'node_view',
      'node_insert',
      'node_update',
      'node_delete',
    ),
  );

  $actions['beep_multiple_beep_action'] = array(
    'label' => t('Beep multiple times'),
    'type' => 'system',
    'configurable' => TRUE,
    'triggers' => array(
      'node_view',
      'node_insert',
      'node_update',
      'node_delete',
    ),
  );

  return $actions;
}


/**
 * Action function named by the convention as MODULE_FUNCNAME_action.
 *
 * Action function takes 2 to 4 parameters. $entity is not NULL
 * depending on action type and trigger type,
 */
function beep_beep_action(&$entity, $context) {
  beep_beep();
}


/**
 * Logs a 'Beep' system message.
 */
function beep_beep() {
  watchdog('beep', 'Beep!');
}


/**
 * Multiple Beep advanced action form definition function.
 */
function beep_multiple_beep_action_form($context) {
  $form['beeps'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of beeps'),
    '#description' => t('Enter the number of times to beep when this action executes'),
    '#default_value' => isset($context['beeps']) ? $context['beeps'] : '1',
    '#required' => TRUE,
    '#size' => 3,
  );

  return $form;
}


/**
 * Multiple Beep advanced action validate function.
 *
 * The validate function is called before submit function.
 */
function beep_multiple_beep_action_validate($form, $form_state) {
  $beeps = $form_state['values']['beeps'];

  /*
  is_int returns FALSE for integer string like for example '1'.
  if (!is_int($beeps)) {
  form_set_error('beeps', t('Please enter a whole number between 0 and 10.'));
  }
  */

  if (!is_numeric($beeps) || intval($beeps) != $beeps) {
    form_set_error('beeps', t('Please enter a whole number between 0 and 10.'));
  }
  elseif ((int) $beeps > 10) {
    form_set_error('beeps', t('That would be too annoying. Please choose not more than 10
        beeps.'));
  }
  elseif ((int) $beeps < 0) {
    form_set_error('beeps', t('That would likely create a black hole! Beeps must be a
        positive integer.'));
  }
}


/**
 * Multiple Beep advanced action submit function.
 *
 * The submit functionâ€™s return value is special for action configuration
 * forms. It should be an array keyed by the fields we are interested in.
 * The values in this array will be made available to the action when
 * it runs. The description is handled automatically, so we need only to
 * return the field we provided, that is, the number of beeps.
 */
function beep_multiple_beep_action_submit($form, $form_state) {
  return array('beeps' => (int) $form_state['values']['beeps']);
}


/**
 * Multiple Beep advance action function.
 *
 * @param object $entity
 *   Object that is currently being acted (node, user, taxonomy).
 *   For example, if an action is set to execute when a new node is
 *   created, the $entity parameter will contain the node object.
 *   However $entity is NULL if action type is not consistent with
 *   triger type (for example if action type is 'system' for node
 *   tiggers).
 * @param array $context
 *   Action function context.
 */
function beep_multiple_beep_action(&$entity, $context) {
  for ($i = 0; $i < $context['beeps']; $i++) {
    beep_beep();
  }
}


/**
 * Implements hook_action_info_alter().
 */
function beep_action_info_alter(&$actions) {
  // The module user (user.module) already provides the action
  // 'user_block_user_action', however, this action does not show up on
  // the triggers assignment page, because they do not declare any supported
  // hooks; the triggers key is just an empty array.
  // Make the "Block current user" action available to the comment insert
  // trigger: add (not overwrite!) a hook to the triggers list.
  if (!in_array('comment_insert', $actions['user_block_user_action']['triggers'])) {
    $actions['user_block_user_action']['triggers'][] = 'comment_insert';
  }
  // Remarks:
  // - In this example user.module defines the action for 'any' hook
  // - if 'any' is set, then the code above inserts 'comment_insert' too
  // - uncomment dpm to see the content of the actions:
  // dpm($actions);
}
