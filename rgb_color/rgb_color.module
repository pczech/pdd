<?php

/**
 * @file
 * An example field using the Field API.
 */


/**
 * Implements hook_field_info().
 *
 * The hook is called on a module install, cache cleanup, Manage Fields.
 * The new field is visible in content type -> manage fields page if
 * hook_field_widget_info() defines any widget for the new field type.
 * At this moment the field is not added to database (field_schema is not
 * called yet).
 */
function rgb_color_field_info() {
  _rgb_color_trace(__FUNCTION__);
  // dpm(field_info_widget_types());
  // dpm(field_info_formatter_types());
  return array(
    'rgb_color' => array(
      'label' => t('RGB Color'),
      'description' => t('Demonstrates a field composed of an RGB color.'),
      'default_widget' => 'rgb_color_3text',
      'default_formatter' => 'rgb_color_simple_text',
    ),
  );
}


/**
 * The RBG Color field has been added to Article and Page Content Type.
 * Here's the content of column data in field_config_instance table.
 * Article:
 * a:7:{
 *   s:5:"label";s:5:"Color";
 *   s:6:"widget";a:5:{
 *     s:6:"weight";i:0;
 *     s:4:"type";s:15:"rgb_color_3text";
 *     s:6:"module";s:9:"rgb_color";
 *     s:6:"active";i:0;
 *     s:8:"settings";a:0:{}
 *   }
 *   s:8:"settings";a:1:{
 *     s:18:"user_register_form";b:0;
 *   }
 *   s:7:"display";a:1:{
 *     s:7:"default";a:5:{
 *       s:5:"label";s:5:"above";
 *       s:4:"type";s:21:"rgb_color_simple_text";
 *       s:8:"settings";a:0:{}
 *       s:6:"module";N;
 *       s:6:"weight";i:11;
 *     }
 *   }
 *   s:8:"required";i:0;
 *   s:11:"description";s:0:"";
 *   s:13:"default_value";N;
 * }
 *
 * Page:
 * a:7:{
 *   s:5:"label";s:6:"Color2";
 *   s:6:"widget";a:5:{
 *     s:6:"weight";s:2:"-1";
 *     s:4:"type";s:21:"rgb_color_colorpicker";
 *     s:6:"module";s:9:"rgb_color";
 *     s:6:"active";i:0;
 *     s:8:"settings";a:0:{}
 *   }
 *   s:8:"settings";a:1:{
 *     s:18:"user_register_form";b:0;
 *   }
 *   s:7:"display";a:1:{
 *     s:7:"default";a:5:{
 *       s:5:"label";s:5:"above";
 *       s:4:"type";s:21:"rgb_color_simple_text";
 *       s:8:"settings";a:0:{}
 *       s:6:"module";N;
 *       s:6:"weight";i:2;
 *     }
 *   }
 *   s:8:"required";i:0;
 *   s:11:"description";s:0:"";
 *   s:13:"default_value";N;
 * }
 */

/**
 * Implements hook_field_widget_info().
 *
 * The hook is called after hook_field_info().
 */
function rgb_color_field_widget_info() {
  _rgb_color_trace(__FUNCTION__);

  return array(
    'rgb_color_text' => array(
      'label' => t('RGB value as #ffffff'),
      'field types' => array('rgb_color'),
    ),
    'rgb_color_3text' => array(
      'label' => t('RGB text fields'),
      'field types' => array('rgb_color'),
    ),
    'rgb_color_colorpicker' => array(
      'label' => t('Color Picker'),
      'field types' => array('rgb_color'),
    ),
  );
}


/**
 * Implements hook_field_widget_form().
 *
 * The hook is called when the field is created, for example in
 * Content Type -> Manage Fields page, when a content containing the field is
 * created or edited (the content type form is displayed).
 *
 * Important:
 * field name ('rgb') in the form has to be the same like field
 * name in the database schema defined in hook_field_schema(). Otherwise
 * the values entered in the form fields aren't stored in database (only
 * empty entries are stored).
 *
 * field 'rgb' is based on $element, so it includes fields accessed in
 * rgb_color_3text_validate(), especially #delta.
 */
function rgb_color_field_widget_form(&$form, &$form_state, $field, $instance,
  $langcode, $items, $delta, $element) {
  _rgb_color_trace(__FUNCTION__);

  // dpm($form);
  // dpm($form_state);
  // dpm($field);
  // dpm($instance);
  // dpm($langcode);
  // dpm($items);
  // dpm($delta);
  // dpm($element);

  $widget = $element;
  // What is it for?
  // $element += array('#delta' => $delta);

  switch ($instance['widget']['type']) {
    case 'rgb_color_colorpicker':
      $widget += array(
        '#attributes' => array(
          'class' => array('edit-rgb-color-colorpicker'),
        ),
        '#suffix' => '<div class="rgb-color-colorpicker"></div>',
        '#attached' => array(
          // Add Farbtastic colorpicker.
          'library' => array(
            array('system', 'farbtastic'),
          ),
          // Add javascript to trigger the colorpicker.
          'js' => array(
            drupal_get_path('module', 'rgb_color') . '/rgb_color.js',
          ),
        ),
      );
      // NO BREAK!

    case 'rgb_color_text':
      // Load current RGB color value.
      if (isset($items[$delta]['rgb'])) {
        $value = $items[$delta]['rgb'];
      }
      else {
        $value = '';
      }
      $widget += array(
        '#type' => 'textfield',
        '#title' => t("Event's RGB Color"),
        '#default_value' => $value,
        // Allow a slightly larger size than the field length to allow for some
        // configurations where all characters won't fit in input field.
        '#size' => 7,
        '#maxlength' => 7,
      );
      break;

    case 'rgb_color_3text':
      // Load current RGB color value and split it to r, g, b.
      if (isset($items[$delta]['rgb'])) {
        preg_match_all('@..@', substr($items[$delta]['rgb'], 1), $match);
      }
      else {
        $match = array(array());
      }
      // dpm($match);
      $widget += array(
        '#type' => 'fieldset',
        '#element_validate' => array('rgb_color_3text_validate'),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'rgb_color') . '/rgb_color.css',
          ),
        ),
      );
      foreach (array('r' => 'Red', 'g' => 'Green', 'b' => 'Blue') as $key => $title) {
        $widget[$key] = array(
          '#type' => 'textfield',
          '#title' => check_plain($title),
          '#default_value' => array_shift($match[0]),
          '#size' => 2,
          // '#attributes' => array('class' => array('rgb-entry')),
        );
      }
      break;
  }

  $element['rgb'] = $widget;

  // dpm($element);
  return $element;
}


/**
 * Validate the individual RGB fields and convert them into a single text.
 *
 * The field type defines a single text column, rgb, which needs
 * an HTML color code. Define an element validate handler that converts our
 * r, g, b fields into a simulated single “rgb” form element.
 *
 * The hook is called on saving the content type. Validation order:
 * rgb_color_3text_validate()
 * rgb_color_is_empty()
 * rgb_color_validate()
 */
function rgb_color_3text_validate($element, &$form_state, $form) {
  _rgb_color_trace(__FUNCTION__);
  // dpm($element);
  // dpm($form_state);
  // dpm($form);

  $delta = $element['#delta'];
  $language = $element['#language'];
  $field = $form_state['field'][$element['#field_name']][$language]['field'];
  $field_name = $field['field_name'];

  if (isset($form_state['values'][$field_name][$language][$delta]['rgb'])) {
    $values = $form_state['values'][$field_name][$language][$delta]['rgb'];
    foreach ($values as $field_id => $field_val) {
      // If they left any empty, we'll set the value empty and quit.
      if (strlen($field_val) == 0) {
        form_set_value($element, '', $form_state);
        // dpm($form_state);
        return;
      }
      // If they gave us anything that's not hex, reject it.
      if (!preg_match('@^[0-9a-f]{2}$@', $field_val)) {
        form_error($element[$field_id],
          t("Saturation value must be a 2-digit hexadecimal value between 00 and ff."));
      }
    }
  }

  $keys = array_keys($values);
  $rgb = sprintf('#%02s%02s%02s', $values[$keys[0]], $values[$keys[1]], $values[$keys[2]]);
  // dpm($form_state);
  form_set_value($element, $rgb, $form_state);
  // dpm($form_state);
}


/**
 * Implements hook_field_is_empty().
 *
 * The hook is called on saving the content type. It is used for fields that
 * can accept multiple values, to determine which items in the list has
 * been filled out, for example, Fdelta - multiple value field:
 * F0: Value
 * F1:
 * F2: Value
 * F3:
 * F4: Value
 *
 * hook_field_is_empty() always returns FALSE:
 * All fields are stored.
 *
 * hook_field_is_empty() always returns TRUE:
 * No field is stored.
 *
 * hook_field_is_empty() returns empty(field):
 * F0,F2,F4 are saved (as consecutive fields F0`, F1`, F2`)
 */
function rgb_color_field_is_empty($item, $field) {
  _rgb_color_trace(__FUNCTION__);
  // dpm($item);
  // dpm($field);
  return empty($item['rgb']);
}


/**
 * Implements hook_field_validate().
 *
 * Verifies that the RGB field as combined is valid (6 hex digits with a #
 * at the beginning).
 *
 * The hook is called on saving the content type.
 */
function rgb_color_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  _rgb_color_trace(__FUNCTION__);

  // dpm($entity_type);
  // dpm($entity);
  // dpm($field);
  // dpm($instance);
  // dpm($langcode);
  // dpm($items);
  // dpm($errors);

  foreach ($items as $delta => $item) {
    if (!empty($item['rgb'])) {
      if (!preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'rgb_color_invalid',
          'message' => t('Color must be in the HTML format #abcdef.'),
        );
      }
    }
  }
}


/**
 * Implements hook_field_widget_error().
 *
 * Not needed.
 */
/*
function rgb_color_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'rgb_color_invalid':
      form_error($element, $error['message']);
      break;
  }
}
*/


/**
 * Implements hook_field_formatter_info().
 *
 * Called on cache clean up
 */
function rgb_color_field_formatter_info() {
  _rgb_color_trace(__FUNCTION__);

  return array(
    // This formatter just displays the hex value in the color indicated.
    'rgb_color_simple_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('rgb_color'),
    ),
    // This formatter changes the background color of the content region.
    'rgb_color_background' => array(
      'label' => t('Change the background of the output text'),
      'field types' => array('rgb_color'),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function rgb_color_field_formatter_view($entity_type, $entity, $field, $instance,
  $langcode, $items, $display) {
  _rgb_color_trace(__FUNCTION__);
  // dpm($entity_type);
  // dpm($entity);
  // dpm($field);
  // dpm($instance);
  // dpm($langcode);
  // dpm($items);
  // dpm($display);

  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'rgb_color_simple_text':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = '<p style="color: ' . $item['rgb'] . '">'
        . t('The color for this event is @code',
          array('@code' => $item['rgb'])) . '</p>';
      }
      break;

    // This formatter adds css to the page changing the '.region-content' area's
    // background color. If there are many fields, the last one will win.
    case 'rgb_color_background':
      foreach ($items as $delta => $item) {
        drupal_add_css('div.region-content { background-color:' . $item['rgb'] . ';}',
          array('type' => 'inline'));
        $element[$delta]['#markup'] = '<p>'
        . t('The color for this event has been changed to @code',
          array('@code' => $item['rgb'])) . '</p>';
      }
      break;
  }

  // dpm($element);
  return $element;
}


/**
 * Traces module functions' calls.
 */
function _rgb_color_trace($mark) {
  dpm($mark);
}
